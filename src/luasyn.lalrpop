use std::str::FromStr;
use crate::grammar::*;

grammar;

pub LuaStatements: Vec<Spanned<LuaStatement>> = {
    <s:LuaStatement> => vec![s],
    <mut r:LuaStatements> <s:LuaStatement> => {
        r.push(s);
        r
    },
}

LuaStatement: Spanned<LuaStatement> = {
    <s:@L> "--" <c:SingleLineComment> => Spanned::new(LuaStatement::Comment(c), s),
    <s:@L> "local" <n:VarName> "=" <v:LuaExpression> => Spanned::new(LuaStatement::VarDeclaration {
        name: n,
        value: v,
    }, s),
};

VarName: Spanned<String> = <s:@L> <t:r"[a-zA-Z_]\w+"> => Spanned::new(t.to_string(), s);

SingleLineComment: Spanned<LuaComment> = {
    <s:@L> "@type" <t:LuaType> => Spanned::new(LuaComment::TypeAnnotation(t), s),
}

LuaType: Spanned<LuaType> = {
    <s:@L> "number" => Spanned::new(LuaType::Number, s),
    <s:@L> "string" => Spanned::new(LuaType::String, s),
}

LuaExpression: Spanned<LuaExpression> = {
    <s:@L> <value:r#""[^"]*""#> => {
        // Remove the surrounding quotes
        let text = &value[1..value.len()-1];
        let token = LuaExpression::StringLiteral(Spanned::new(text.to_string(), s));
        Spanned::new(token, s)
    },
    <s:@L> <value:r"[0-9]+"> => {
        let value = f64::from_str(value).unwrap();
        let token = LuaExpression::NumberLiteral(Spanned::new(value, s));
        Spanned::new(token, s)
    },
}
