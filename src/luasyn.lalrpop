use std::str::FromStr;
use crate::grammar::*;

grammar;

pub LuaStatements: Vec<LuaStatement> = {
    <s:LuaStatement> => vec![s],
    <mut r:LuaStatements> <s:LuaStatement> => {
        r.push(s);
        r
    },
}

LuaStatement: LuaStatement = {
    <s:@L> "--" <c:SingleLineComment> => LuaStatement::Comment(c),
    <s:@L> "local" <n:VarName> "=" <v:LuaExpression> => LuaStatement::new_var_assignment(
        Span::new(s),
        n,
        v,
    ),
};

// VarName: Spanned<String> = <s:@L> <t:r"[a-zA-Z_]\w+"> => Spanned::new(t.to_string(), s);
VarName: String = <t:r"[a-zA-Z_]\w+"> => t.to_string();

SingleLineComment: LuaComment = {
    // <s:@L> "@type" <t:LuaType> => Spanned::new(LuaComment::TypeAnnotation(t), s),
    "@type" <t:LuaType> => LuaComment::TypeAnnotation(t),
}

LuaType: LuaType = {
    <s:@L> "nil" => LuaType::Nil,
    <s:@L> "boolean" => LuaType::Boolean,
    <s:@L> "number" => LuaType::Number,
    <s:@L> "string" => LuaType::String,
}

LuaExpression: LuaExpression = {
    <value:r#""[^"]*""#> => {
        // Remove the surrounding quotes
        let text = &value[1..value.len()-1];
        LuaExpression::StringLiteral(text.to_string())
    },
    <value:r"[0-9]+"> => {
        let value = f64::from_str(value).unwrap();
        LuaExpression::NumberLiteral(value)
    },
}
