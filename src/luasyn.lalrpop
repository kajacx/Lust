use std::str::FromStr;
use crate::*;

grammar;

pub LuaStatements: Vec<LuaStatement> = {
    <s:Statement> => vec![s],
    <mut r:LuaStatements> <s:Statement> => {
        r.push(s);
        r
    },
}

Statement: LuaStatement = {
    "--" <c:SingleLineComment> => LuaStatement::Comment(c),
    "local" <n:VarName> "=" <v:Expression> => LuaStatement::VarDeclaration {
        name: n,
        value: v,
    },
};

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();

VarName: String = <s:r"[a-zA-Z_]\w+"> => s.to_string();

SingleLineComment: LuaComment = {
    "@type" <t:Type> => LuaComment::TypeAnnotation(t),
}

Type: LustType = {
    "number" => LustType::Number,
    "string" => LustType::String,
}

Expression: LuaExpression = {
    r#""[^"]*""# => {
        // Remove the surrounding quotes
        let s = &<>[1..<>.len()-1];
        LuaExpression::StringLiteral(s.to_string())
    },
}
