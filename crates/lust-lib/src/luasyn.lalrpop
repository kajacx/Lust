use std::str::FromStr;
use crate::grammar::*;

grammar;

pub LuaStatements: Vec<LuaStatement> = {
    <s:LuaStatement> => vec![s],
    <mut r:LuaStatements> <s:LuaStatement> => {
        r.push(s);
        r
    },
}

LuaStatement: LuaStatement = {
    <s:@L> "--" <c:SingleLineComment> => LuaStatement::Comment(c),
    <s:@L> "local" <n:VarName> "=" <v:LuaExpression> => LuaStatement::new_var_assignment(
        Span::new(s),
        n,
        v,
    ),
};

// VarName: Spanned<String> = <s:@L> <t:r"[a-zA-Z_]\w+"> => Spanned::new(t.to_string(), s);
VarName: String = {
    "nil" => "nil".to_string(), // TODO: why??????
    r"[a-zA-Z_]\w*" => <>.to_string(),
}

SingleLineComment: LuaComment = {
    // <s:@L> "@type" <t:LuaType> => Spanned::new(LuaComment::TypeAnnotation(t), s),
    "@type" <t:LuaType> => LuaComment::TypeAnnotation(t),
}

LuaType: LuaType = {
    LuaSingleType => <>,
    <t1:LuaType> "|" <t2:LuaSingleType> => LuaType::new_union(t1, t2),
    <t1:LuaType> "?" => LuaType::new_union(t1, LuaType::Nil),
}

LuaSingleType: LuaType = {
    <s:@L> "nil" => LuaType::Nil,
    <s:@L> "boolean" => LuaType::Boolean,
    <s:@L> "number" => LuaType::Number, // TODO: a variable named 'number' causes an error in the parser
    <s:@L> "string" => LuaType::String,
}

LuaExpression: LuaExpression = {
    LuaSingleExpression => <>,
    <left:LuaExpression> "or" <right:LuaSingleExpression> => {
        LuaExpression::new_or(left, right)
    },
}

LuaSingleExpression: LuaExpression = {
    // nil / bool / variable
    <v: VarName> => {
        if v == "nil" {
            LuaExpression::Nil
        } else if v == "true" {
            LuaExpression::BooleanLiteral(true)
        } else if v == "false" {
            LuaExpression::BooleanLiteral(false)
        } else {
            LuaExpression::VarName(v)
        }
    },

    // number
    <value:r"[0-9]+"> => {
        let value = f64::from_str(value).unwrap();
        LuaExpression::NumberLiteral(value)
    },

    // string
    <value:r#""[^"]*""#> => {
        // Remove the surrounding quotes
        let text = &value[1..value.len()-1];
        LuaExpression::StringLiteral(text.to_string())
    },
}
